/**

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

 */

#pragma once

#include <vector>
#include <queue>
#include <memory>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <future>
#include <functional>
#include <stdexcept>

namespace thread_pool {

    namespace utility {
        struct NonCopyable {
        protected:
            NonCopyable () {}
            ~NonCopyable () {} /// should be non virtual
        private:
            NonCopyable (const NonCopyable &);
            NonCopyable & operator = (const NonCopyable &);
        };
    } // namespace utility


    /// TODO: use faster one
    using Task = std::function<void()>;

    /// Policy struct for ThreadPool
    struct SimpleQueue {
        std::queue<Task> task_queue;

        const auto& front() const {
            return this->task_queue.front();
        }

        template <typename Task>
        void emplace([[gnu::unused]] long priority, Task&& task) noexcept {
            this->task_queue.emplace(std::forward<Task>(task));
        }
    };

    enum struct Priority : long {
        zero = 0
    };

    struct PriorityTask {
        long priority;
        Task task;

        PriorityTask(long priority, Task&& task) noexcept
            : priority(priority), task(std::move(task))
        {}

        bool operator<(const PriorityTask& that) const noexcept {
            return this->priority < that.priority;
        }
    };

    /// Policy struct for ThreadPool
    struct PriorityQueue {
        std::priority_queue<PriorityTask> task_queue;

        const auto& front() const {
            return this->task_queue.top().task;
        }

        template <typename Task>
        void emplace(long priority, Task&& task) noexcept {
            this->task_queue.emplace(priority, std::forward<Task>(task));
        }
    };


    template <typename QueuePolicy = SimpleQueue>
    struct ThreadPool : utility::NonCopyable {
    private:
        QueuePolicy policy;
        std::vector<std::thread> workers;
        std::mutex queue_mutex;
        std::condition_variable condition;
        bool stop = false;

        /// helper methods
        void consume() {
            Task task;
            while (this->pop(task)) {
                task();
            }
        }

        void stop_threads() noexcept {
            // atomic operation
            std::unique_lock<std::mutex> lock(this->queue_mutex);
            this->stop = true;
        }

        bool pop(Task& task) noexcept {
            // atomic operation
            std::unique_lock<std::mutex> lock(this->queue_mutex);
            this->condition.wait(lock, [this]{ return this->stop ||
                        !this->policy.task_queue.empty(); });
            if (this->stop && this->policy.task_queue.empty()) {
                return false;
            }
            task = std::move(this->policy.front());
            this->policy.task_queue.pop();
            return true;
        }

        template <typename Result>
        void push(long priority, const std::shared_ptr<std::packaged_task<Result()>>& task) {
            // atomic operation
            std::unique_lock<std::mutex> lock(this->queue_mutex);
            if(this->stop) {
                throw std::runtime_error("enqueue on stopped ThreadPool");
            }
            this->policy.emplace(priority, [task] { (*task)(); });
        }

    public:
        /// NOTE: hardware_concurrency returns 0 if not available
        ThreadPool() noexcept : ThreadPool(std::max(1u, std::thread::hardware_concurrency())) {}

        ThreadPool(size_t threads) noexcept {
            this->workers.reserve(threads);
            for (size_t i = 0; i < threads ;++i) {
                this->workers.emplace_back([this] { this->consume(); });
            }
        }

        /// RAII
        virtual ~ThreadPool() {
            this->stop_threads();
            this->condition.notify_all();
            for (auto&& worker: this->workers) {
                worker.join();
            }
        }

        /**
           \example

           ThreadPool<> pool;
           auto res = pool.enqueue(0, [](auto&& s) { std::cout << s << std::endl; }, "hello");
           res.get(); // or wait until pool destructed
         */
        template<class F, typename ... Args,
                 typename Return = typename std::result_of<F(Args...)>::type>
        auto enqueue(long priority, F&& f, Args&& ... args) {
            auto task = std::make_shared<std::packaged_task<Return()>>
                (std::bind(std::forward<F>(f), std::forward<Args>(args)...));
            auto res = task->get_future();
            this->push(priority, task);
            this->condition.notify_one();
            return res;
        }

        template<class F, typename ... Args,
                 typename Return = typename std::result_of<F(Args...)>::type>
        auto enqueue(F&& f, Args&& ... args) {
            return this->enqueue(static_cast<long>(Priority::zero),
                                 std::forward<F>(f), std::forward<Args>(args)...);
        }
    };

} // namespace thread_pool
